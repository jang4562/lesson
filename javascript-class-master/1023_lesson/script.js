// 제어문

/**
 * 프로그램의 흐름(실행 순서)을 조작하는 방법
 */


 // 제어문1 - if 문

 /**
  * 조건에 따라 다르게 데이터를 처리하고 싶을 때 사용한다.
  * 
  * 여기서 조건은 주로 비교연산자(==, <, >, <=, >=, !)를 활용해서 표현한다.
  * 조건은 true(참), 혹은 false(거짓)가 되므로
  * 참인 경우에 대한 실행, 거짓인 경우에 대한 실행을 나누어서 진행 할 수 있다.
  * (실행을 분기한다)
  * 
  * 기본 형태)
  * if (조건) {
  *     조건에 해당되는 경우(true, 참인 경우)
  *     코드1
  *     코드2
  * }
  * 조건에 해당되지 않는 경우(false, 거짓인 경우)
  * 
  * 참고 : 대괄호 ({}) 안의 부분은 코드를 여러줄 수행할 수 있다.
  *        그러나 실행하는 며열ㅇ이 1줄이면 대괄호를 생략할 수 있다.
  * 
  * if(조건)
  *    코드1
  * 코드2
  * 
  * 참인 경우는 코드 1 실행, 거짓이면 코드 2 실행
  */

  a = 10; // 1
  //2
  if(a % 2 == 1) { // 3
      window.document.write(a, "는 홀수입니다."); // 4
  }
  // 5
  if(a % 2 == 0) { // 6
      window.document.write(a, "는 짝수입니다."); // 7
  }
  // 8

  // 1 >> 2 >> 3(비교했더니 거짓 4번 실행안함) >> 5 >> 6(비교했더니 참) >> 7 >> 8

  // 제어문2 - if else 문

  /**
   * 비교하였을 때 참인 부분은 if 조건 아래의 대괄호로 표시된 부분을 실행하고
   * 거짓이면 else 아래 대괄호로 표시된 부분을 실행하는 형태
   * 
   * 기본형태)
   * if(조건) {
   *    참일경우 실행하는 부분
   * } else {
   *     거짓일 경우 실행하는 부분
   * }
   */
  
   a = 10; // 1
  //2
  if(a % 2 == 1) { // 3
      window.document.write(a, "는 홀수입니다."); // 4
  } else { // 6
      window.document.write(a, "는 짝수입니다."); // 7
  }

/**
변수 score 에 0~100점 점수를 저장하고 

70점 이하이면 70-점수를 표시하고 70점 이상이면 "잘 했습니다" 출력하기



70점 이하

당신의 점수는 65점 입니다.

70점 까지 5점 남았습니다.


70점 이상

"잘 했습니다."
 */

score = 65;

window.document.write("당신의 점수는 ", score, "점 입니다.");

if(score < 70) {
   window.document.write("70점까지 ", 70-score, "점 남았습니다.");
} else {
    window.document.write("잘 했습니다.");
}

/**
 * 참고)
 * if 문과 삼항연산자의 활용
 * 
 * 공통점이 비교 코드가 꼭 필요하다.
 * if 문은 비교 결과에 따라서 실행하는 처리가 달라진다,
 * 삼항연산자는 비교 결과에 따라서 변수에 값을 다르게 저장할 때 주로 쓴다.
 * 
 * 예시)
 * 만약 변수 score에 값이 70보다 크다면, 변수 grade에 'pass'라는 문자열 저장
 * 작다면 'not pass'라는 문자열을 저장
 * 
 * case 1) if 문
 * if(score > 70) {
 *    grade = 'pass';
 * } else {
 *    grade = 'not pass';
 * }
 * 
 * case 2) 삼항연산자
 * grade = (score > 70) ? 'pass' : 'not pass';
 */

 // 제어문3 - if - else if - else 문
 /**
  * 여러 개의 조건주에서 어느것에 해당하는지 각각 다르게 처리하고 싶을때
  * if문에 else if를 추가해준다. else if의 수에는 제한이 없다.
  * 
  * 기본형태)
  * if(비교1) {
  *     비교에서 참인 경우
  * } else if(비교2) {
  *     비교1번에서 거짓이고 
  *     비교2번에서 참인경우
  * } else if(비교3) {
  *     비교1번에서 거짓이고
  *     비교2번에서 거짓이고
  *     비교3번에서 참인 경우
  * } else {
  *     비교1번에서 거짓이고,
  *     비교2번에서 거짓이고,
  *     비교3번에서 거짓인 경우(모든 조건에서 거짓인 경우)
  * }
  * 
  * 조건이 참이면 대괄호 부부분이 실행되고 나머지 else if, else 부분은
  * 실행하지 않는다(무시한다). 조건이 거짓이면 다음 조건을 비교한다.
  * 마지막까지 조건이 거짓이면 else 부분을 실행한다.
  */

  num = 45;
  

  window.document.write(num, '는');

  if(num >= 0 && num <= 9) {
      window.document.write(" 한 자리 수입니다.");
  } else if(num >= 10 && num <= 99) {
      window.document.write(" 두 자리 수입니다.");
  } else {
      window.document.write("세 자리 수입니다.");
  }

  //if 문 활용 참고 내용

  /**
   * if 문안의 대괄호에 또다른 if문을 넣을 수 있다.
   * 
   * 기본 형태)
   * if(조건 1) {
   *    if(조건 2) {
   *        조건1이 참이고, 조건2도 참인 경우
   *    } else {
   *        조건1이 참이고, 조건2는 거짓인 경우
   *    }
   * } else {
   *    if(조건 3) {
   *        조건1이 거짓이고, 조건3는 참인 경우
   *    } else {
   *        조건1이 거짓이고, 조건3는 거짓인 경우
   *    }
   * }
   */

/**
 * 예시 : 변수 a에 숫자가 80보다 크면 "잘했습니다." 
 *        100이면 "너무너무 잘했습니다."
 *        80보다 작다면 "열심히 합시다."
 */

a = 100;

if(a > 80) {
    if(a == 100) {
        alert("너무너무 잘했습니다.")
    } else {
        alert("잘했습니다.")
    }
} else {
    alert("열심히 합시다.")
}
// 반복문

/**
 * 프로그램에서 동일한 처리를 반복해서 수행하는 경우에 활용한다.
 */

 // for 문

 /**
  * 반복횟수를 정해놓고 반복 처리를 해주는 구문
  * 
  * 기본형태)
  * for(반복횟수를 저장할 변수 설정; 반복할 조건; 반복횟수 증가(감소)) {
  * 반복 실행할 코드
  * }
  * 
  * for(i = 0; i < 반복횟수; i++) {
  * 반복 실행할 코드
  * }
  * 
  * 반복횟수를 저장할 변수(반복변수) 설정 : 
  * 변수이름 짓는 규칙은 일반 변수 이름 짓는 규칙이랑
  * 같다. 대신 주로 숫자가 저장된다.
  * 
  * 반복할 조건 : 반복변수를 활용해서 반복할 조건이 들어가는 부분
  * 조건부분이 참일 경우는 계속 반복을 진행하고
  * 조건부분이 거짓일 경우는 반복을 중단한다.
  * 
  * for(i = 0; i < 100; i++){
  *  반복 실행할 코드
  * }
  * 설명 : i의 값은 0이고 100보다 작으므로 코드가 반복 실행된다.
  * 
  * 반복횟수 증가(감소) : 반복할 조건이 참이면 반복 실행할 코드를 
  * 수행하고 마지막으로 반복횟수를 증가 1만큼 증가 시킨다.
  * 
  * 감소의 예시)
  * for(i = 3; i >= 0; i--) {
  *  반복 실행하는 부분
  * }
  * 설명 : 변수 i의 값이 3부터 시작을 한다.
  *        비교 부분에서 변수 i의 값(3)은 0보다 크거나 같다(즉, 비교 부분이 참이다.)
  *        대괄호 안에 반복 실행되는 부분이 1회 수행된다.
  *        변수 i의 값을 1회 감소 시킨다.
  * 
  * 참고사항 : 반복횟수를 표현하던 변수는 대괄호 안에서 쓸수 있다.
  */
window.document.write("<br>");

for(i = 0; i < 5; i++){
    window.document.write("안녕하세요 회원", i, "<br>");
}

/**
 * 예시2) 구구단 2단 출력하기
 * 출력)
 * 2 X 1 = 2
 * 2 X 2 = 4
 * 2 X 3 = 6
 * ...
 * 2 X 9 = 18
 */
window.document.write("<br>");

 for(i = 1; i <= 9; i++){
     // 반복 횟수 변수 i는 1부터 시작한다.
     // 비교부분(i <= 9;)에서 변수 i의 값 1이 9보다 작으므로(참)
     // 즉 반복을 수행한다.
     // 반복 부분 : 2출력 >> 곱하기표시(X) 출력 >> 골합 숫자 출력 
     // >> 등호 (=)출력 >> 2와 곱할 숫자를 곱셈한 결과 출력
     window.document.write("2 X ",i," = ",2*i, "<br>");
     //9회 반복 후 i의 값은 10된다.
     // 비교부분에서 변수 i의 값이 9보다 크므로 거짓이된다.
     // 즉 반복이 종료된다.
 }

 /**
  * 참고 : if문처럼 for문도 대괄호 안에 다른 for 문이 들어갈수 있다.
  */
 
 /**
 * 예시2) 구구단 출력하기
 * 출력)
 * 2 X 1 = 2
 * 2 X 2 = 4
 * 2 X 3 = 6
 * ...
 * 9 X 9 = 81
 */
window.document.write("<br><br>");

for(i = 2;i <= 9; i++){
    for(j = 1; j <= 9; j++){
        window.document.write(i, " X ", j, " = ", i*j, "<br>");
    }
}
/**
 * 반복 작업을 할 때 변하는 데이터 갯수에 따라서 중첩 횟수가 달라진다.
 */


// 반복문2 - while 문

/**
 * 어떤 조건이 성립되는 동안 반복처리를 실행하는 제어문이다.
 * for문과는 다르게 반복할 횟수가 정해져 있지 않을 경우에 활용한다.
 *
 * 기본형태)
 * while(반복 실행을 결정하는 조건) {
 *  반복해서 실행하고 싶은 처리
 * }
 * 
 * 조건이 참일 경우, 대괄호 안에 있는 반복해서 실행하고 싶은 처리를 진행한다.
 * 조건이 거짓일 경우, 대괄호 안에 있는 반복해서 실행하고 싶은 처리를 진행하지 않는다.
 * 
 * 조건이 참이여서 반복 처리를 수행한 후에는 다시 한번
 * 반복 실행 조건을 비교하여 조건의 참 / 거짓을 판별한다
 * 판별 결과에 따라 다시 처리를 반복할지 않할지를 결정
 * 
 * while(true) {
 *  처리
 * }
 * 
 * 
 */
 a = 0 
 while(a < 2) {
     alert("폭탄 팝업");
     a++;
 }
/**
 * while문과 for문은 서로 바꾸어서 코드를 작성할 수 있다.
 */

 for(i = 0; i < 2; i++){
     alert("for문으로 만든 폭탄 팝업");
 }

 // 반복문3 - do-while 문
 /**
  * do~while문은 while문과 마찬가지로 반복을 수행하는 구문이다.
  * do~while문은 while문과 달리 
  * do{
  *     처리 내용
  * }
  * 으로 구성된 부분을 반복을 수행하기 전에
  * 꼭 한번 실행하게 되는 차이점이 있다.
  * 
  * 기본형태)
  * do {
  *     반복처리를 하기전에 먼저 처리하고 싶은 내용
  * } while(반복 실행을 결정하는 조건);
  */
/**
 * while과 do~while과의 차이점
 * 
 * while은 비교후에 참이면 반복을 처리하고 거짓이면 반복을 처리하지 않는다.
 * do~while은 반복 내용을 처리하고 비교후에 참이면 다시 반복내용을 처리,
 * 거짓이면 반복하지 않는다.
 * 
 * 경우에 따라서는 비교 결과에 따라
 * while문은 반복 내용이 1번도 처리되지 않을 수 있다.(반복 처리 불가)
 * do~while문은 반복내용을 적어도 1번 처리할 수 있다.(처리후 비교하기 때문에)
 */



